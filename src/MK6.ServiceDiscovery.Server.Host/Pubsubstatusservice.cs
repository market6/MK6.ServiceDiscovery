// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pubsubstatusservice.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace MK6.ServiceDiscovery.Grpc {

  /// <summary>Holder for reflection information generated from pubsubstatusservice.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class PubsubstatusserviceReflection {

    #region Descriptor
    /// <summary>File descriptor for pubsubstatusservice.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PubsubstatusserviceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChlwdWJzdWJzdGF0dXNzZXJ2aWNlLnByb3RvEhlNSzYuU2VydmljZURpc2Nv",
            "dmVyeS5HcnBjIs0BChFTZXJ2aWNlRGVzY3JpcHRvchIKCgJpZBgBIAEoCRIU",
            "CgxkaXNwbGF5X25hbWUYAiABKAkSEAoIcHJvdG9jb2wYAyABKAkSDAoEaG9z",
            "dBgEIAEoCRIMCgRwb3J0GAUgASgFEkYKBHR5cGUYBiABKA4yOC5NSzYuU2Vy",
            "dmljZURpc2NvdmVyeS5HcnBjLlNlcnZpY2VEZXNjcmlwdG9yLlNlcnZpY2VU",
            "eXBlIiAKC1NlcnZpY2VUeXBlEgcKA1JQQxAAEggKBFJFU1QQASLSAQoNU2Vy",
            "dmljZVN0YXR1cxJICgRjb2RlGAEgASgOMjouTUs2LlNlcnZpY2VEaXNjb3Zl",
            "cnkuR3JwYy5TZXJ2aWNlU3RhdHVzLlNlcnZpY2VTdGF0dXNDb2RlEhMKC2Rl",
            "c2NyaXB0aW9uGAIgASgJImIKEVNlcnZpY2VTdGF0dXNDb2RlEgwKCFNUQVJU",
            "SU5HEAASCwoHU1RBUlRFRBABEgwKCFNUT1BQSU5HEAISCwoHU1RPUFBFRBAD",
            "EgsKB1BBVVNJTkcQBBIKCgZQQVVTRUQQBSKiAQoUU2VydmljZVN0YXR1c1Jl",
            "cXVlc3QSSAoSc2VydmljZV9kZXNjcmlwdG9yGAEgASgLMiwuTUs2LlNlcnZp",
            "Y2VEaXNjb3ZlcnkuR3JwYy5TZXJ2aWNlRGVzY3JpcHRvchJACg5zZXJ2aWNl",
            "X3N0YXR1cxgCIAEoCzIoLk1LNi5TZXJ2aWNlRGlzY292ZXJ5LkdycGMuU2Vy",
            "dmljZVN0YXR1cyIXChVTZXJ2aWNlU3RhdHVzUmVzcG9uc2UyhQEKE1B1YlN1",
            "YlN0YXR1c1NlcnZpY2USbgoHUHVibGlzaBIvLk1LNi5TZXJ2aWNlRGlzY292",
            "ZXJ5LkdycGMuU2VydmljZVN0YXR1c1JlcXVlc3QaMC5NSzYuU2VydmljZURp",
            "c2NvdmVyeS5HcnBjLlNlcnZpY2VTdGF0dXNSZXNwb25zZSIAYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::MK6.ServiceDiscovery.Grpc.ServiceDescriptor), global::MK6.ServiceDiscovery.Grpc.ServiceDescriptor.Parser, new[]{ "Id", "DisplayName", "Protocol", "Host", "Port", "Type" }, null, new[]{ typeof(global::MK6.ServiceDiscovery.Grpc.ServiceDescriptor.Types.ServiceType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MK6.ServiceDiscovery.Grpc.ServiceStatus), global::MK6.ServiceDiscovery.Grpc.ServiceStatus.Parser, new[]{ "Code", "Description" }, null, new[]{ typeof(global::MK6.ServiceDiscovery.Grpc.ServiceStatus.Types.ServiceStatusCode) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MK6.ServiceDiscovery.Grpc.ServiceStatusRequest), global::MK6.ServiceDiscovery.Grpc.ServiceStatusRequest.Parser, new[]{ "ServiceDescriptor", "ServiceStatus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MK6.ServiceDiscovery.Grpc.ServiceStatusResponse), global::MK6.ServiceDiscovery.Grpc.ServiceStatusResponse.Parser, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ServiceDescriptor : pb::IMessage<ServiceDescriptor> {
    private static readonly pb::MessageParser<ServiceDescriptor> _parser = new pb::MessageParser<ServiceDescriptor>(() => new ServiceDescriptor());
    public static pb::MessageParser<ServiceDescriptor> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::MK6.ServiceDiscovery.Grpc.PubsubstatusserviceReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ServiceDescriptor() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ServiceDescriptor(ServiceDescriptor other) : this() {
      id_ = other.id_;
      displayName_ = other.displayName_;
      protocol_ = other.protocol_;
      host_ = other.host_;
      port_ = other.port_;
      type_ = other.type_;
    }

    public ServiceDescriptor Clone() {
      return new ServiceDescriptor(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "display_name" field.</summary>
    public const int DisplayNameFieldNumber = 2;
    private string displayName_ = "";
    public string DisplayName {
      get { return displayName_; }
      set {
        displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "protocol" field.</summary>
    public const int ProtocolFieldNumber = 3;
    private string protocol_ = "";
    public string Protocol {
      get { return protocol_; }
      set {
        protocol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "host" field.</summary>
    public const int HostFieldNumber = 4;
    private string host_ = "";
    public string Host {
      get { return host_; }
      set {
        host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 5;
    private int port_;
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 6;
    private global::MK6.ServiceDiscovery.Grpc.ServiceDescriptor.Types.ServiceType type_ = 0;
    public global::MK6.ServiceDiscovery.Grpc.ServiceDescriptor.Types.ServiceType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ServiceDescriptor);
    }

    public bool Equals(ServiceDescriptor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (DisplayName != other.DisplayName) return false;
      if (Protocol != other.Protocol) return false;
      if (Host != other.Host) return false;
      if (Port != other.Port) return false;
      if (Type != other.Type) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
      if (Protocol.Length != 0) hash ^= Protocol.GetHashCode();
      if (Host.Length != 0) hash ^= Host.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DisplayName);
      }
      if (Protocol.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Protocol);
      }
      if (Host.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Host);
      }
      if (Port != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Port);
      }
      if (Type != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Type);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (DisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
      }
      if (Protocol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Protocol);
      }
      if (Host.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    public void MergeFrom(ServiceDescriptor other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.DisplayName.Length != 0) {
        DisplayName = other.DisplayName;
      }
      if (other.Protocol.Length != 0) {
        Protocol = other.Protocol;
      }
      if (other.Host.Length != 0) {
        Host = other.Host;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            DisplayName = input.ReadString();
            break;
          }
          case 26: {
            Protocol = input.ReadString();
            break;
          }
          case 34: {
            Host = input.ReadString();
            break;
          }
          case 40: {
            Port = input.ReadInt32();
            break;
          }
          case 48: {
            type_ = (global::MK6.ServiceDiscovery.Grpc.ServiceDescriptor.Types.ServiceType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ServiceDescriptor message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum ServiceType {
        [pbr::OriginalName("RPC")] Rpc = 0,
        [pbr::OriginalName("REST")] Rest = 1,
      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ServiceStatus : pb::IMessage<ServiceStatus> {
    private static readonly pb::MessageParser<ServiceStatus> _parser = new pb::MessageParser<ServiceStatus>(() => new ServiceStatus());
    public static pb::MessageParser<ServiceStatus> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::MK6.ServiceDiscovery.Grpc.PubsubstatusserviceReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ServiceStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ServiceStatus(ServiceStatus other) : this() {
      code_ = other.code_;
      description_ = other.description_;
    }

    public ServiceStatus Clone() {
      return new ServiceStatus(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::MK6.ServiceDiscovery.Grpc.ServiceStatus.Types.ServiceStatusCode code_ = 0;
    public global::MK6.ServiceDiscovery.Grpc.ServiceStatus.Types.ServiceStatusCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private string description_ = "";
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ServiceStatus);
    }

    public bool Equals(ServiceStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Description != other.Description) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      return size;
    }

    public void MergeFrom(ServiceStatus other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            code_ = (global::MK6.ServiceDiscovery.Grpc.ServiceStatus.Types.ServiceStatusCode) input.ReadEnum();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ServiceStatus message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum ServiceStatusCode {
        [pbr::OriginalName("STARTING")] Starting = 0,
        [pbr::OriginalName("STARTED")] Started = 1,
        [pbr::OriginalName("STOPPING")] Stopping = 2,
        [pbr::OriginalName("STOPPED")] Stopped = 3,
        [pbr::OriginalName("PAUSING")] Pausing = 4,
        [pbr::OriginalName("PAUSED")] Paused = 5,
      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ServiceStatusRequest : pb::IMessage<ServiceStatusRequest> {
    private static readonly pb::MessageParser<ServiceStatusRequest> _parser = new pb::MessageParser<ServiceStatusRequest>(() => new ServiceStatusRequest());
    public static pb::MessageParser<ServiceStatusRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::MK6.ServiceDiscovery.Grpc.PubsubstatusserviceReflection.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ServiceStatusRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ServiceStatusRequest(ServiceStatusRequest other) : this() {
      ServiceDescriptor = other.serviceDescriptor_ != null ? other.ServiceDescriptor.Clone() : null;
      ServiceStatus = other.serviceStatus_ != null ? other.ServiceStatus.Clone() : null;
    }

    public ServiceStatusRequest Clone() {
      return new ServiceStatusRequest(this);
    }

    /// <summary>Field number for the "service_descriptor" field.</summary>
    public const int ServiceDescriptorFieldNumber = 1;
    private global::MK6.ServiceDiscovery.Grpc.ServiceDescriptor serviceDescriptor_;
    public global::MK6.ServiceDiscovery.Grpc.ServiceDescriptor ServiceDescriptor {
      get { return serviceDescriptor_; }
      set {
        serviceDescriptor_ = value;
      }
    }

    /// <summary>Field number for the "service_status" field.</summary>
    public const int ServiceStatusFieldNumber = 2;
    private global::MK6.ServiceDiscovery.Grpc.ServiceStatus serviceStatus_;
    public global::MK6.ServiceDiscovery.Grpc.ServiceStatus ServiceStatus {
      get { return serviceStatus_; }
      set {
        serviceStatus_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ServiceStatusRequest);
    }

    public bool Equals(ServiceStatusRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ServiceDescriptor, other.ServiceDescriptor)) return false;
      if (!object.Equals(ServiceStatus, other.ServiceStatus)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (serviceDescriptor_ != null) hash ^= ServiceDescriptor.GetHashCode();
      if (serviceStatus_ != null) hash ^= ServiceStatus.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (serviceDescriptor_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ServiceDescriptor);
      }
      if (serviceStatus_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ServiceStatus);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (serviceDescriptor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServiceDescriptor);
      }
      if (serviceStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServiceStatus);
      }
      return size;
    }

    public void MergeFrom(ServiceStatusRequest other) {
      if (other == null) {
        return;
      }
      if (other.serviceDescriptor_ != null) {
        if (serviceDescriptor_ == null) {
          serviceDescriptor_ = new global::MK6.ServiceDiscovery.Grpc.ServiceDescriptor();
        }
        ServiceDescriptor.MergeFrom(other.ServiceDescriptor);
      }
      if (other.serviceStatus_ != null) {
        if (serviceStatus_ == null) {
          serviceStatus_ = new global::MK6.ServiceDiscovery.Grpc.ServiceStatus();
        }
        ServiceStatus.MergeFrom(other.ServiceStatus);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (serviceDescriptor_ == null) {
              serviceDescriptor_ = new global::MK6.ServiceDiscovery.Grpc.ServiceDescriptor();
            }
            input.ReadMessage(serviceDescriptor_);
            break;
          }
          case 18: {
            if (serviceStatus_ == null) {
              serviceStatus_ = new global::MK6.ServiceDiscovery.Grpc.ServiceStatus();
            }
            input.ReadMessage(serviceStatus_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ServiceStatusResponse : pb::IMessage<ServiceStatusResponse> {
    private static readonly pb::MessageParser<ServiceStatusResponse> _parser = new pb::MessageParser<ServiceStatusResponse>(() => new ServiceStatusResponse());
    public static pb::MessageParser<ServiceStatusResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::MK6.ServiceDiscovery.Grpc.PubsubstatusserviceReflection.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ServiceStatusResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ServiceStatusResponse(ServiceStatusResponse other) : this() {
    }

    public ServiceStatusResponse Clone() {
      return new ServiceStatusResponse(this);
    }

    public override bool Equals(object other) {
      return Equals(other as ServiceStatusResponse);
    }

    public bool Equals(ServiceStatusResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(ServiceStatusResponse other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
